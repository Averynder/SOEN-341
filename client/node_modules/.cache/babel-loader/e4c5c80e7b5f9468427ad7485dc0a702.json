{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from \"react\";\nimport Course from \"./Course\"; // Functioning Linked List Class\n// class MyDoublyLinkedList extends Component{\n// class MyDoublyLinkedList {\n// }\n//\n// export default MyDoublyLinkedList;\n//\n// const list = new MyDoublyLinkedList('first');\n// list.addToHead('second');\n//\n// console.log(new MyDoublyLinkedList('Hello!'));\n//\n// console.log(list);\n\nvar MyDoublyLinkedList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyDoublyLinkedList, _Component);\n\n  function MyDoublyLinkedList(props) {\n    var _this;\n\n    _classCallCheck(this, MyDoublyLinkedList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyDoublyLinkedList).call(this, props));\n\n    _this.size = function () {\n      return this.size;\n    };\n\n    _this.isEmpty = function () {\n      return this.size === 0;\n    };\n\n    _this.addFirst = function (element) {\n      var tmp = new MyDoublyLinkedList.Node(this, element, this.head, null);\n\n      if (this.head != null) {\n        this.head.prev = tmp;\n      }\n\n      this.head = tmp;\n\n      if (this.tail == null) {\n        this.tail = tmp;\n      }\n\n      this.size++;\n    };\n\n    _this.addLast = function (element) {\n      if (this.size > 0) {\n        // for (var i = 0; i < this.size; i++) {\n        var current = this.head;\n\n        while (current !== null) {\n          if (JSON.stringify(current.element) === JSON.stringify(element)) {\n            console.log(\"Duplicate element found! Will not be added.\");\n            return;\n          }\n\n          current = current.next;\n        } // }\n\n      }\n\n      var tmp = new MyDoublyLinkedList.Node(this, element, null, this.tail);\n\n      if (this.tail != null) {\n        this.tail.next = tmp;\n      }\n\n      this.tail = tmp;\n\n      if (this.head == null) {\n        this.head = tmp;\n      }\n\n      this.size++; // node current = head;\n      // node prev = null;\n      // while (current != null)\n      // {\n      //     int curval = current.val;\n      //\n      //     // If current value is seen before\n      //     if (hs.contains(curval)) {\n      //         prev.next = current.next;\n      //     } else {\n      //         hs.add(curval);\n      //         prev = current;\n      //     }\n      //     current = current.next;\n      // }\n    };\n\n    _this.remove = function (given) {\n      if (this.size === 0) {\n        console.log(\"This list is empty!\");\n      }\n\n      var temporary = this.head;\n\n      while (temporary != null) {\n        if (temporary.element === given) {\n          if (temporary === this.head && temporary === this.tail) {\n            this.head = null;\n            this.tail = null;\n          } else if (temporary === this.head) {\n            this.head = this.head.next;\n            this.head.prev = null;\n          } else if (temporary === this.tail) {\n            this.tail = this.tail.prev;\n            this.tail.next = null;\n          } else {\n            temporary.prev.next = temporary.next;\n            temporary.next.prev = temporary.prev;\n          }\n\n          this.size--;\n          return temporary.element;\n        }\n\n        temporary = temporary.next;\n      }\n    };\n\n    if (_this.head === undefined) _this.head = null;\n    if (_this.tail === undefined) _this.tail = null;\n    if (_this.size === undefined) _this.size = 0;\n    _this.size = 0;\n    return _this;\n  }\n\n  _createClass(MyDoublyLinkedList, [{\n    key: \"getLast\",\n    value: function getLast() {\n      return this.tail.element;\n    }\n  }, {\n    key: \"getFirst\",\n    value: function getFirst() {\n      return this.head.element;\n    }\n  }, {\n    key: \"cloneMe\",\n    value: function cloneMe() {\n      var newLL = new MyDoublyLinkedList();\n      var current = this.head; // for (var i = 0; i < current.size; i++) {\n      //\n      //     newLL.addLast(current.element);\n      //     current = current.next;\n      //     newLL.size++;\n      //\n      // }\n\n      while (current != null) {\n        newLL.addLast(current.element);\n        current = current.next;\n      }\n\n      return newLL;\n    }\n    /**\r\n     * returns the size of the linked list\r\n     * @return\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"removeFirst\",\n\n    /**\r\n     * this method removes element from the start of the linked list\r\n     * @return\r\n     * @return {*}\r\n     */\n    value: function removeFirst() {\n      if (this.size === 1) {\n        this.size--;\n        var start = this.head;\n        var prev = null;\n\n        if (start == null) {\n          return;\n        }\n\n        if (start.next == null) {\n          this.tail = null;\n          this.head = null;\n          return;\n        }\n\n        while (start.next != null) {\n          prev = start;\n          start = start.next;\n        }\n\n        prev.next = null;\n        return start.element;\n      } else if (this.size > 1) {\n        var tmp = this.head;\n        this.head = this.head.next;\n        this.head.prev = null;\n        this.size--;\n        return tmp.element;\n      } else if (this.size === 0) {\n        console.log(\"This list is empty!\");\n      }\n    }\n  }, {\n    key: \"removeLast\",\n\n    /**\r\n     * this method removes element from the end of the linked list\r\n     * @return\r\n     * @return {*}\r\n     */\n    value: function removeLast() {\n      if (this.size === 1) {\n        this.size--;\n        var start = this.head;\n        var prev = null;\n\n        if (start == null) {\n          return;\n        }\n\n        if (start.next == null) {\n          this.tail = null;\n          this.head = null;\n          return;\n        }\n\n        while (start.next != null) {\n          prev = start;\n          start = start.next;\n        }\n\n        prev.next = null;\n        return start.element;\n      } else if (this.size > 1) {\n        var tmp = this.tail;\n        this.tail = this.tail.prev;\n        this.tail.next = null;\n        this.size--;\n        return tmp.element;\n      } else if (this.size === 0) {\n        console.log(\"This list is empty!\");\n      }\n    }\n  }]);\n\n  return MyDoublyLinkedList;\n}(Component);\n\n;\nMyDoublyLinkedList[\"class\"] = \"MyDoublyLinkedList\";\n\n(function (MyDoublyLinkedList) {\n  /**\r\n   * this class keeps track of each element information\r\n   * @author java2novice\r\n   * @param {*} element\r\n   * @param {MyDoublyLinkedList.Node} next\r\n   * @param {MyDoublyLinkedList.Node} prev\r\n   * @class\r\n   */\n  var Node = function () {\n    function Node(parent, element, next, prev) {\n      this.parent = parent;\n      if (this.element === undefined) this.element = null;\n      if (this.next === undefined) this.next = null;\n      if (this.prev === undefined) this.prev = null;\n      this.element = element;\n      this.next = next;\n      this.prev = prev;\n    }\n\n    return Node;\n  }();\n\n  MyDoublyLinkedList.Node = Node;\n  Node[\"class\"] = \"MyDoublyLinkedList.Node\";\n})(MyDoublyLinkedList || (MyDoublyLinkedList = {})); // Test code\n//     var testMe = new MyDoublyLinkedList();\n//\n//\n//\n//\n//         testMe.addLast(56);\n//         testMe.addLast(364);\n// console.log(\"current size of linked-list: \" + testMe.size);\n// testMe.addLast(56);\n// testMe.addLast(133);\n// console.log(\"current size of linked-list: \" + testMe.size);\n//         testMe.removeFirst();\n//         testMe.removeLast();\n//\n//         console.log('LOL69');\n//         console.log(testMe.size);\n//\n//         testMe.addFirst(100);\n//         console.log(testMe.size);\n//         console.log(\"hey\");\n//\n//         console.log(testMe.size);\n//\n//         testMe.addLast(9999);\n//         console.log(testMe.size);\n//\n//         console.log(testMe.head);\n//         console.log(\"after delete\");\n//         testMe.remove(100);\n//         console.log(testMe.size);\n//         console.log(testMe.head);\n//\n//         testMe.removeFirst();\n//         console.log(testMe.tail);\n//\n//         testMe.removeFirst();\n//         console.log(testMe.tail);\n//         console.log(testMe.size);\n//         testMe.removeFirst();\n//\n//         console.log(\"milestone\");\n//         console.log(testMe.size);\n//         console.log(testMe.tail);\n//         console.log(testMe.head);\n//\n//         testMe.addFirst(1111);\n//         testMe.addFirst(2222);\n//\n//         console.log(\"milestone2\");\n//         console.log(testMe.tail);\n//         console.log(testMe.head);\n//         console.log(testMe.size);\n//\n//         console.log(\"removing the last element in the list\");\n//         // testMe.remove(1111);\n//         console.log(testMe.size);\n//         console.log(testMe.tail);\n//         console.log(testMe.head);\n//         // testMe.remove(2222);\n//         console.log(testMe.size);\n//         console.log(testMe.tail);\n//         console.log(testMe.head);\n//\n//\n// console.log(\"same?\");\n// var Course11 = new Course(\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\");\n// var Course22 = new Course(\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\");\n// var Course33 = new Course(\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"no\");\n//\n//\n// var eq = JSON.stringify(Course11) === JSON.stringify(Course22);\n// console.log(eq);\n\n\nexport default MyDoublyLinkedList;","map":{"version":3,"sources":["C:\\Users\\MonPC\\Desktop\\School\\SOEN\\SOEN 341 Software Process'\\Project\\cssd\\client\\src\\MyDoublyLinkedList.js"],"names":["React","Component","Course","MyDoublyLinkedList","props","size","isEmpty","addFirst","element","tmp","Node","head","prev","tail","addLast","current","JSON","stringify","console","log","next","remove","given","temporary","undefined","newLL","start","parent"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport Course from \"./Course\";\r\n\r\n// Functioning Linked List Class\r\n\r\n// class MyDoublyLinkedList extends Component{\r\n\r\n// class MyDoublyLinkedList {\r\n\r\n// }\r\n//\r\n// export default MyDoublyLinkedList;\r\n//\r\n// const list = new MyDoublyLinkedList('first');\r\n// list.addToHead('second');\r\n//\r\n// console.log(new MyDoublyLinkedList('Hello!'));\r\n//\r\n// console.log(list);\r\n\r\n\r\n\r\nclass MyDoublyLinkedList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.head === undefined)\r\n            this.head = null;\r\n        if (this.tail === undefined)\r\n            this.tail = null;\r\n        if (this.size === undefined)\r\n            this.size = 0;\r\n        this.size = 0;\r\n    }\r\n\r\n    getLast() {\r\n        return this.tail.element;\r\n    }\r\n\r\n    getFirst() {\r\n        return this.head.element;\r\n    }\r\n\r\n    cloneMe() {\r\n\r\n        var newLL = new MyDoublyLinkedList();\r\n        var current = this.head;\r\n\r\n        // for (var i = 0; i < current.size; i++) {\r\n        //\r\n        //     newLL.addLast(current.element);\r\n        //     current = current.next;\r\n        //     newLL.size++;\r\n        //\r\n        // }\r\n\r\n        while (current != null) {\r\n            newLL.addLast(current.element);\r\n            current = current.next;\r\n        }\r\n\r\n        return newLL;\r\n\r\n    }\r\n\r\n    /**\r\n     * returns the size of the linked list\r\n     * @return\r\n     * @return {number}\r\n     */\r\n    size = function () {\r\n        return this.size;\r\n    };\r\n    /**\r\n     * return whether the list is empty or not\r\n     * @return\r\n     * @return {boolean}\r\n     */\r\n    isEmpty = function () {\r\n        return this.size === 0;\r\n    };\r\n    /**\r\n     * adds element at the starting of the linked list\r\n     * @param {*} element\r\n     */\r\n    addFirst = function (element) {\r\n\r\n        var tmp = new MyDoublyLinkedList.Node(this, element, this.head, null);\r\n        if (this.head != null) {\r\n            this.head.prev = tmp;\r\n        }\r\n        this.head = tmp;\r\n        if (this.tail == null) {\r\n            this.tail = tmp;\r\n        }\r\n        this.size++;\r\n    };\r\n    /**\r\n     * adds element at the end of the linked list\r\n     * @param {*} element\r\n     */\r\n    addLast = function (element) {\r\n\r\n        if (this.size > 0) {\r\n\r\n            // for (var i = 0; i < this.size; i++) {\r\n\r\n            let current = this.head;\r\n            while (current !== null) {\r\n\r\n                if (JSON.stringify(current.element) === JSON.stringify(element)) {\r\n                    console.log(\"Duplicate element found! Will not be added.\");\r\n                    return\r\n                }\r\n                current = current.next;\r\n            }\r\n            // }\r\n        }\r\n\r\n        var tmp = new MyDoublyLinkedList.Node(this, element, null, this.tail);\r\n        if (this.tail != null) {\r\n            this.tail.next = tmp;\r\n        }\r\n        this.tail = tmp;\r\n        if (this.head == null) {\r\n            this.head = tmp;\r\n        }\r\n        this.size++;\r\n\r\n        // node current = head;\r\n        // node prev = null;\r\n        // while (current != null)\r\n        // {\r\n        //     int curval = current.val;\r\n        //\r\n        //     // If current value is seen before\r\n        //     if (hs.contains(curval)) {\r\n        //         prev.next = current.next;\r\n        //     } else {\r\n        //         hs.add(curval);\r\n        //         prev = current;\r\n        //     }\r\n        //     current = current.next;\r\n        // }\r\n\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Removes a given element from anywhere within the list\r\n     * @param given element that user is searching for, in order to delete\r\n     */\r\n    remove = function(given) {\r\n\r\n        if (this.size === 0) {\r\n            console.log(\"This list is empty!\")\r\n        }\r\n\r\n        var temporary = this.head;\r\n        while(temporary != null) {\r\n            if(temporary.element === given) {\r\n                if(temporary === this.head && temporary === this.tail) {\r\n                    this.head = null;\r\n                    this.tail = null;\r\n                } else if(temporary === this.head) {\r\n                    this.head = this.head.next;\r\n                    this.head.prev = null;\r\n                } else if(temporary === this.tail) {\r\n                    this.tail = this.tail.prev;\r\n                    this.tail.next = null;\r\n                } else {\r\n                    temporary.prev.next = temporary.next;\r\n                    temporary.next.prev = temporary.prev;\r\n                }\r\n                this.size--;\r\n                return temporary.element;\r\n            }\r\n            temporary = temporary.next;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * this method removes element from the start of the linked list\r\n     * @return\r\n     * @return {*}\r\n     */\r\n    removeFirst() {\r\n\r\n        if (this.size === 1) {\r\n            this.size--;\r\n\r\n            var start = this.head;\r\n            var prev = null;\r\n            if(start == null){\r\n                return;\r\n            }\r\n            if (start.next == null){\r\n                this.tail = null;\r\n                this.head = null;\r\n\r\n                return;\r\n            }\r\n            while (start.next != null) {\r\n                prev = start;\r\n                start = start.next;\r\n            }\r\n            prev.next = null;\r\n\r\n            return start.element;\r\n\r\n        }\r\n\r\n        else if (this.size > 1) {\r\n            var tmp = this.head;\r\n            this.head = this.head.next;\r\n            this.head.prev = null;\r\n            this.size--;\r\n            return tmp.element;\r\n        }\r\n\r\n        else if (this.size === 0) {\r\n            console.log(\"This list is empty!\")\r\n        }\r\n    };\r\n    /**\r\n     * this method removes element from the end of the linked list\r\n     * @return\r\n     * @return {*}\r\n     */\r\n    removeLast() {\r\n\r\n        if (this.size === 1) {\r\n            this.size--;\r\n\r\n            var start = this.head;\r\n            var prev = null;\r\n            if(start == null){\r\n                return;\r\n            }\r\n            if (start.next == null){\r\n                this.tail = null;\r\n                this.head = null;\r\n\r\n                return;\r\n            }\r\n            while (start.next != null) {\r\n                prev = start;\r\n                start = start.next;\r\n            }\r\n            prev.next = null;\r\n\r\n            return start.element;\r\n\r\n        }\r\n\r\n\r\n\r\n        else if (this.size > 1) {\r\n\r\n            var tmp = this.tail;\r\n            this.tail = this.tail.prev;\r\n            this.tail.next = null;\r\n            this.size--;\r\n            return tmp.element;\r\n        }\r\n\r\n        else if (this.size === 0) {\r\n            console.log(\"This list is empty!\")\r\n        }\r\n    };\r\n};\r\n\r\n\r\nMyDoublyLinkedList[\"class\"] = \"MyDoublyLinkedList\";\r\n(function (MyDoublyLinkedList) {\r\n    /**\r\n     * this class keeps track of each element information\r\n     * @author java2novice\r\n     * @param {*} element\r\n     * @param {MyDoublyLinkedList.Node} next\r\n     * @param {MyDoublyLinkedList.Node} prev\r\n     * @class\r\n     */\r\n    var Node = (function () {\r\n        function Node(parent, element, next, prev) {\r\n            this.parent = parent;\r\n            if (this.element === undefined)\r\n                this.element = null;\r\n            if (this.next === undefined)\r\n                this.next = null;\r\n            if (this.prev === undefined)\r\n                this.prev = null;\r\n            this.element = element;\r\n            this.next = next;\r\n            this.prev = prev;\r\n        }\r\n        return Node;\r\n    }());\r\n    MyDoublyLinkedList.Node = Node;\r\n    Node[\"class\"] = \"MyDoublyLinkedList.Node\";\r\n})(MyDoublyLinkedList || (MyDoublyLinkedList = {}));\r\n\r\n\r\n\r\n// Test code\r\n\r\n//     var testMe = new MyDoublyLinkedList();\r\n//\r\n//\r\n//\r\n//\r\n//         testMe.addLast(56);\r\n//         testMe.addLast(364);\r\n// console.log(\"current size of linked-list: \" + testMe.size);\r\n// testMe.addLast(56);\r\n// testMe.addLast(133);\r\n// console.log(\"current size of linked-list: \" + testMe.size);\r\n\r\n\r\n\r\n\r\n//         testMe.removeFirst();\r\n//         testMe.removeLast();\r\n//\r\n//         console.log('LOL69');\r\n//         console.log(testMe.size);\r\n//\r\n//         testMe.addFirst(100);\r\n//         console.log(testMe.size);\r\n//         console.log(\"hey\");\r\n//\r\n//         console.log(testMe.size);\r\n//\r\n//         testMe.addLast(9999);\r\n//         console.log(testMe.size);\r\n//\r\n//         console.log(testMe.head);\r\n//         console.log(\"after delete\");\r\n//         testMe.remove(100);\r\n//         console.log(testMe.size);\r\n//         console.log(testMe.head);\r\n//\r\n//         testMe.removeFirst();\r\n//         console.log(testMe.tail);\r\n//\r\n//         testMe.removeFirst();\r\n//         console.log(testMe.tail);\r\n//         console.log(testMe.size);\r\n//         testMe.removeFirst();\r\n//\r\n//         console.log(\"milestone\");\r\n//         console.log(testMe.size);\r\n//         console.log(testMe.tail);\r\n//         console.log(testMe.head);\r\n//\r\n//         testMe.addFirst(1111);\r\n//         testMe.addFirst(2222);\r\n//\r\n//         console.log(\"milestone2\");\r\n//         console.log(testMe.tail);\r\n//         console.log(testMe.head);\r\n//         console.log(testMe.size);\r\n//\r\n//         console.log(\"removing the last element in the list\");\r\n//         // testMe.remove(1111);\r\n//         console.log(testMe.size);\r\n//         console.log(testMe.tail);\r\n//         console.log(testMe.head);\r\n//         // testMe.remove(2222);\r\n//         console.log(testMe.size);\r\n//         console.log(testMe.tail);\r\n//         console.log(testMe.head);\r\n//\r\n//\r\n// console.log(\"same?\");\r\n\r\n// var Course11 = new Course(\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\");\r\n// var Course22 = new Course(\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\");\r\n// var Course33 = new Course(\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"no\");\r\n//\r\n//\r\n// var eq = JSON.stringify(Course11) === JSON.stringify(Course22);\r\n// console.log(eq);\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default MyDoublyLinkedList;\r\n"]},"metadata":{},"sourceType":"module"}