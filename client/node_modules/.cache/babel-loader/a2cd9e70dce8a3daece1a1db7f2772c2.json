{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\MonPC\\\\Desktop\\\\School\\\\SOEN\\\\SOEN 341 Software Process'\\\\Project\\\\cssd\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from \"react\";\nimport Course from \"./Course\"; // Functioning Linked List Class\n// class MyDoublyLinkedList extends Component{\n// class MyDoublyLinkedList {\n// }\n//\n// export default MyDoublyLinkedList;\n//\n// const list = new MyDoublyLinkedList('first');\n// list.addToHead('second');\n//\n// console.log(new MyDoublyLinkedList('Hello!'));\n//\n// console.log(list);\n\nvar MyDoublyLinkedList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyDoublyLinkedList, _Component);\n\n  function MyDoublyLinkedList(props) {\n    var _this;\n\n    _classCallCheck(this, MyDoublyLinkedList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyDoublyLinkedList).call(this, props));\n\n    _this.size = function () {\n      return this.size;\n    };\n\n    _this.isEmpty = function () {\n      return this.size === 0;\n    };\n\n    _this.addFirst = function (element) {\n      if (this.size > 0) {\n        // for (var i = 0; i < this.size; i++) {\n        var current = this.head;\n\n        while (current !== null) {\n          if (JSON.stringify(current.element) === JSON.stringify(element)) {\n            console.log(\"Duplicate element found! Will not be added.\");\n            return;\n          }\n\n          current = current.next;\n        } // }\n\n      }\n\n      var tmp = new MyDoublyLinkedList.Node(this, element, this.head, null);\n\n      if (this.head != null) {\n        this.head.prev = tmp;\n      }\n\n      this.head = tmp;\n\n      if (this.tail == null) {\n        this.tail = tmp;\n      }\n\n      this.size++;\n      console.info(\"adding: \" + element);\n    };\n\n    _this.addLast = function (element) {\n      if (this.size > 0) {\n        // for (var i = 0; i < this.size; i++) {\n        var current = this.head;\n\n        while (current !== null) {\n          if (JSON.stringify(current.element) === JSON.stringify(element)) {\n            console.log(\"Duplicate element found! Will not be added.\");\n            return;\n          }\n\n          current = current.next;\n        } // }\n\n      }\n\n      var tmp = new MyDoublyLinkedList.Node(this, element, null, this.tail);\n\n      if (this.tail != null) {\n        this.tail.next = tmp;\n      }\n\n      this.tail = tmp;\n\n      if (this.head == null) {\n        this.head = tmp;\n      }\n\n      this.size++;\n      console.info(\"adding: \" + element); // node current = head;\n      // node prev = null;\n      // while (current != null)\n      // {\n      //     int curval = current.val;\n      //\n      //     // If current value is seen before\n      //     if (hs.contains(curval)) {\n      //         prev.next = current.next;\n      //     } else {\n      //         hs.add(curval);\n      //         prev = current;\n      //     }\n      //     current = current.next;\n      // }\n    };\n\n    _this.remove = function (given) {\n      if (this.size === 0) {\n        console.log(\"This list is empty!\");\n      }\n\n      var temporary = this.head;\n\n      while (temporary != null) {\n        if (temporary.element === given) {\n          if (temporary === this.head && temporary === this.tail) {\n            this.head = null;\n            this.tail = null;\n          } else if (temporary === this.head) {\n            this.head = this.head.next;\n            this.head.prev = null;\n          } else if (temporary === this.tail) {\n            this.tail = this.tail.prev;\n            this.tail.next = null;\n          } else {\n            temporary.prev.next = temporary.next;\n            temporary.next.prev = temporary.prev;\n          }\n\n          this.size--;\n          console.log(\"deleted: \" + temporary.element);\n          return temporary.element;\n        }\n\n        temporary = temporary.next;\n      }\n    };\n\n    if (_this.head === undefined) _this.head = null;\n    if (_this.tail === undefined) _this.tail = null;\n    if (_this.size === undefined) _this.size = 0;\n    _this.size = 0;\n    return _this;\n  }\n\n  _createClass(MyDoublyLinkedList, [{\n    key: \"getLast\",\n    value: function getLast() {\n      return this.tail.element;\n    }\n  }, {\n    key: \"getFirst\",\n    value: function getFirst() {\n      return this.head.element;\n    }\n  }, {\n    key: \"cloneMe\",\n    value: function cloneMe() {\n      var newLL = new MyDoublyLinkedList();\n      var current = this.head; // for (var i = 0; i < current.size; i++) {\n      //\n      //     newLL.addLast(current.element);\n      //     current = current.next;\n      //     newLL.size++;\n      //\n      // }\n\n      while (current != null) {\n        newLL.addLast(current.element);\n        current = current.next;\n      }\n\n      return newLL;\n    }\n    /**\r\n     * returns the size of the linked list\r\n     * @return\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"removeFirst\",\n\n    /**\r\n     * this method removes element from the start of the linked list\r\n     * @return\r\n     * @return {*}\r\n     */\n    value: function removeFirst() {\n      if (this.size === 1) {\n        this.size--;\n        var start = this.head;\n        var prev = null;\n\n        if (start == null) {\n          return;\n        }\n\n        if (start.next == null) {\n          this.tail = null;\n          this.head = null;\n          console.log(\"deleted: \" + start.element);\n          return;\n        }\n\n        while (start.next != null) {\n          prev = start;\n          start = start.next;\n        }\n\n        prev.next = null;\n        console.log(\"deleted: \" + start.element);\n        return start.element;\n      } else if (this.size > 1) {\n        var tmp = this.head;\n        this.head = this.head.next;\n        this.head.prev = null;\n        this.size--;\n        console.info(\"deleted: \" + tmp.element);\n        return tmp.element;\n      } else if (this.size === 0) {\n        console.log(\"This list is empty!\");\n      }\n    }\n  }, {\n    key: \"removeLast\",\n\n    /**\r\n     * this method removes element from the end of the linked list\r\n     * @return\r\n     * @return {*}\r\n     */\n    value: function removeLast() {\n      if (this.size === 1) {\n        this.size--;\n        var start = this.head;\n        var prev = null;\n\n        if (start == null) {\n          return;\n        }\n\n        if (start.next == null) {\n          this.tail = null;\n          this.head = null;\n          console.log(\"deleted: \" + start.element);\n          return;\n        }\n\n        while (start.next != null) {\n          prev = start;\n          start = start.next;\n        }\n\n        prev.next = null;\n        console.log(\"deleted: \" + start.element);\n        return start.element;\n      } else if (this.size > 1) {\n        var tmp = this.tail;\n        this.tail = this.tail.prev;\n        this.tail.next = null;\n        this.size--;\n        console.info(\"deleted: \" + tmp.element);\n        return tmp.element;\n      } else if (this.size === 0) {\n        console.log(\"This list is empty!\");\n      }\n    }\n  }]);\n\n  return MyDoublyLinkedList;\n}(Component);\n\n;\nMyDoublyLinkedList[\"class\"] = \"MyDoublyLinkedList\";\n\n(function (MyDoublyLinkedList) {\n  var Node = function () {\n    function Node(parent, element, next, prev) {\n      this.parent = parent;\n      if (this.element === undefined) this.element = null;\n      if (this.next === undefined) this.next = null;\n      if (this.prev === undefined) this.prev = null;\n      this.element = element;\n      this.next = next;\n      this.prev = prev;\n    }\n\n    return Node;\n  }();\n\n  MyDoublyLinkedList.Node = Node;\n  Node[\"class\"] = \"MyDoublyLinkedList.Node\";\n})(MyDoublyLinkedList || (MyDoublyLinkedList = {}));\n\nexport default MyDoublyLinkedList;","map":{"version":3,"sources":["C:\\Users\\MonPC\\Desktop\\School\\SOEN\\SOEN 341 Software Process'\\Project\\cssd\\client\\src\\AveryNode.js"],"names":["React","Component","Course","MyDoublyLinkedList","props","size","isEmpty","addFirst","element","current","head","JSON","stringify","console","log","next","tmp","Node","prev","tail","info","addLast","remove","given","temporary","undefined","newLL","start","parent"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport Course from \"./Course\";\r\n\r\n// Functioning Linked List Class\r\n\r\n// class MyDoublyLinkedList extends Component{\r\n\r\n// class MyDoublyLinkedList {\r\n\r\n// }\r\n//\r\n// export default MyDoublyLinkedList;\r\n//\r\n// const list = new MyDoublyLinkedList('first');\r\n// list.addToHead('second');\r\n//\r\n// console.log(new MyDoublyLinkedList('Hello!'));\r\n//\r\n// console.log(list);\r\n\r\n\r\n\r\nclass MyDoublyLinkedList extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tif (this.head === undefined)\r\n\t\t\tthis.head = null;\r\n\t\tif (this.tail === undefined)\r\n\t\t\tthis.tail = null;\r\n\t\tif (this.size === undefined)\r\n\t\t\tthis.size = 0;\r\n\t\tthis.size = 0;\r\n\t}\r\n\r\n\tgetLast() {\r\n\t\treturn this.tail.element;\r\n\t}\r\n\r\n\tgetFirst() {\r\n\t\treturn this.head.element;\r\n\t}\r\n\r\n\tcloneMe() {\r\n\r\n\t\tvar newLL = new MyDoublyLinkedList();\r\n\t\tvar current = this.head;\r\n\r\n\t\t// for (var i = 0; i < current.size; i++) {\r\n\t\t//\r\n\t\t//     newLL.addLast(current.element);\r\n\t\t//     current = current.next;\r\n\t\t//     newLL.size++;\r\n\t\t//\r\n\t\t// }\r\n\r\n\t\twhile (current != null) {\r\n\t\t\tnewLL.addLast(current.element);\r\n\t\t\tcurrent = current.next;\r\n\t\t}\r\n\r\n\t\treturn newLL;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * returns the size of the linked list\r\n\t * @return\r\n\t * @return {number}\r\n\t */\r\n\tsize = function () {\r\n\t\treturn this.size;\r\n\t};\r\n\t/**\r\n\t * return whether the list is empty or not\r\n\t * @return\r\n\t * @return {boolean}\r\n\t */\r\n\tisEmpty = function () {\r\n\t\treturn this.size === 0;\r\n\t};\r\n\t/**\r\n\t * adds element at the starting of the linked list\r\n\t * @param {*} element\r\n\t */\r\n\taddFirst = function (element) {\r\n\r\n\t\tif (this.size > 0) {\r\n\r\n\t\t\t// for (var i = 0; i < this.size; i++) {\r\n\r\n\t\t\tlet current = this.head;\r\n\t\t\twhile (current !== null) {\r\n\r\n\t\t\t\tif (JSON.stringify(current.element) === JSON.stringify(element)) {\r\n\t\t\t\t\tconsole.log(\"Duplicate element found! Will not be added.\");\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tcurrent = current.next;\r\n\t\t\t}\r\n\t\t\t// }\r\n\t\t}\r\n\r\n\t\tvar tmp = new MyDoublyLinkedList.Node(this, element, this.head, null);\r\n\t\tif (this.head != null) {\r\n\t\t\tthis.head.prev = tmp;\r\n\t\t}\r\n\t\tthis.head = tmp;\r\n\t\tif (this.tail == null) {\r\n\t\t\tthis.tail = tmp;\r\n\t\t}\r\n\t\tthis.size++;\r\n\t\tconsole.info(\"adding: \" + element);\r\n\t};\r\n\t/**\r\n\t * adds element at the end of the linked list\r\n\t * @param {*} element\r\n\t */\r\n\taddLast = function (element) {\r\n\r\n\t\tif (this.size > 0) {\r\n\r\n\t\t\t// for (var i = 0; i < this.size; i++) {\r\n\r\n\t\t\tlet current = this.head;\r\n\t\t\twhile (current !== null) {\r\n\r\n\t\t\t\tif (JSON.stringify(current.element) === JSON.stringify(element)) {\r\n\t\t\t\t\tconsole.log(\"Duplicate element found! Will not be added.\");\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tcurrent = current.next;\r\n\t\t\t}\r\n\t\t\t// }\r\n\t\t}\r\n\r\n\t\tvar tmp = new MyDoublyLinkedList.Node(this, element, null, this.tail);\r\n\t\tif (this.tail != null) {\r\n\t\t\tthis.tail.next = tmp;\r\n\t\t}\r\n\t\tthis.tail = tmp;\r\n\t\tif (this.head == null) {\r\n\t\t\tthis.head = tmp;\r\n\t\t}\r\n\t\tthis.size++;\r\n\t\tconsole.info(\"adding: \" + element);\r\n\r\n\t\t// node current = head;\r\n\t\t// node prev = null;\r\n\t\t// while (current != null)\r\n\t\t// {\r\n\t\t//     int curval = current.val;\r\n\t\t//\r\n\t\t//     // If current value is seen before\r\n\t\t//     if (hs.contains(curval)) {\r\n\t\t//         prev.next = current.next;\r\n\t\t//     } else {\r\n\t\t//         hs.add(curval);\r\n\t\t//         prev = current;\r\n\t\t//     }\r\n\t\t//     current = current.next;\r\n\t\t// }\r\n\r\n\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Removes a given element from anywhere within the list\r\n\t * @param given element that user is searching for, in order to delete\r\n\t */\r\n\tremove = function(given) {\r\n\r\n\t\tif (this.size === 0) {\r\n\t\t\tconsole.log(\"This list is empty!\")\r\n\t\t}\r\n\r\n\t\tvar temporary = this.head;\r\n\t\twhile(temporary != null) {\r\n\t\t\tif(temporary.element === given) {\r\n\t\t\t\tif(temporary === this.head && temporary === this.tail) {\r\n\t\t\t\t\tthis.head = null;\r\n\t\t\t\t\tthis.tail = null;\r\n\t\t\t\t} else if(temporary === this.head) {\r\n\t\t\t\t\tthis.head = this.head.next;\r\n\t\t\t\t\tthis.head.prev = null;\r\n\t\t\t\t} else if(temporary === this.tail) {\r\n\t\t\t\t\tthis.tail = this.tail.prev;\r\n\t\t\t\t\tthis.tail.next = null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemporary.prev.next = temporary.next;\r\n\t\t\t\t\ttemporary.next.prev = temporary.prev;\r\n\t\t\t\t}\r\n\t\t\t\tthis.size--;\r\n\t\t\t\tconsole.log(\"deleted: \" + temporary.element);\r\n\t\t\t\treturn temporary.element;\r\n\t\t\t}\r\n\t\t\ttemporary = temporary.next;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * this method removes element from the start of the linked list\r\n\t * @return\r\n\t * @return {*}\r\n\t */\r\n\tremoveFirst() {\r\n\r\n\t\tif (this.size === 1) {\r\n\t\t\tthis.size--;\r\n\r\n\t\t\tvar start = this.head;\r\n\t\t\tvar prev = null;\r\n\t\t\tif(start == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (start.next == null){\r\n\t\t\t\tthis.tail = null;\r\n\t\t\t\tthis.head = null;\r\n\r\n\t\t\t\tconsole.log(\"deleted: \" + start.element);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\twhile (start.next != null) {\r\n\t\t\t\tprev = start;\r\n\t\t\t\tstart = start.next;\r\n\t\t\t}\r\n\t\t\tprev.next = null;\r\n\r\n\t\t\tconsole.log(\"deleted: \" + start.element);\r\n\t\t\treturn start.element;\r\n\r\n\t\t}\r\n\r\n\t\telse if (this.size > 1) {\r\n\t\t\tvar tmp = this.head;\r\n\t\t\tthis.head = this.head.next;\r\n\t\t\tthis.head.prev = null;\r\n\t\t\tthis.size--;\r\n\t\t\tconsole.info(\"deleted: \" + tmp.element);\r\n\t\t\treturn tmp.element;\r\n\t\t}\r\n\r\n\t\telse if (this.size === 0) {\r\n\t\t\tconsole.log(\"This list is empty!\")\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * this method removes element from the end of the linked list\r\n\t * @return\r\n\t * @return {*}\r\n\t */\r\n\tremoveLast() {\r\n\r\n\t\tif (this.size === 1) {\r\n\t\t\tthis.size--;\r\n\r\n\t\t\tvar start = this.head;\r\n\t\t\tvar prev = null;\r\n\t\t\tif(start == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (start.next == null){\r\n\t\t\t\tthis.tail = null;\r\n\t\t\t\tthis.head = null;\r\n\r\n\t\t\t\tconsole.log(\"deleted: \" + start.element);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\twhile (start.next != null) {\r\n\t\t\t\tprev = start;\r\n\t\t\t\tstart = start.next;\r\n\t\t\t}\r\n\t\t\tprev.next = null;\r\n\r\n\t\t\tconsole.log(\"deleted: \" + start.element);\r\n\t\t\treturn start.element;\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\telse if (this.size > 1) {\r\n\r\n\t\t\tvar tmp = this.tail;\r\n\t\t\tthis.tail = this.tail.prev;\r\n\t\t\tthis.tail.next = null;\r\n\t\t\tthis.size--;\r\n\t\t\tconsole.info(\"deleted: \" + tmp.element);\r\n\t\t\treturn tmp.element;\r\n\t\t}\r\n\r\n\t\telse if (this.size === 0) {\r\n\t\t\tconsole.log(\"This list is empty!\")\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nMyDoublyLinkedList[\"class\"] = \"MyDoublyLinkedList\";\r\n(function (MyDoublyLinkedList) {\r\n\tvar Node = (function () {\r\n\t\tfunction Node(parent, element, next, prev) {\r\n\t\t\tthis.parent = parent;\r\n\t\t\tif (this.element === undefined)\r\n\t\t\t\tthis.element = null;\r\n\t\t\tif (this.next === undefined)\r\n\t\t\t\tthis.next = null;\r\n\t\t\tif (this.prev === undefined)\r\n\t\t\t\tthis.prev = null;\r\n\t\t\tthis.element = element;\r\n\t\t\tthis.next = next;\r\n\t\t\tthis.prev = prev;\r\n\t\t}\r\n\t\treturn Node;\r\n\t}());\r\n\tMyDoublyLinkedList.Node = Node;\r\n\tNode[\"class\"] = \"MyDoublyLinkedList.Node\";\r\n})(MyDoublyLinkedList || (MyDoublyLinkedList = {}));\r\n\r\nexport default MyDoublyLinkedList;\r\n"]},"metadata":{},"sourceType":"module"}